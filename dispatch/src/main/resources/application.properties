spring.application.name=dispatch

# Indicamos el servidor de Kafka, en mi Raspberry Pi
spring.kafka.bootstrap-servers=192.168.1.41:29092,192.168.1.41:39092,192.168.1.41:49092

# Indicamos al consumer de Spring que tipo de event payload será y como debe deserializarlo
# --String--
# spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# --JSON--
# ----Sin gestión de errores---
# spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# ----Conn gestión de errores---
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer

# Usamos el deserializador de manejo de errores para evitar infinitas excepciones si el JSON es inválido.
# Al manejador de errores se le asignará el deserializador JSON como clase delegada.
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer

# Para deserializar JSON indicamos que esperamos en concreto, que en nuestro ejemplo es el tipo OrderCreated.
# El deserializador requiere la dependencia de la biblioteca Jackson Data Bind.
spring.kafka.consumer.properties.spring.json.value.default.type=com.jmmm.dispatch.message.OrderCreated
